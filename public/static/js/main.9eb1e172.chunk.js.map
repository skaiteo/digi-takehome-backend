{"version":3,"sources":["fetch.js","components/login.component.js","components/register.component.js","components/search.component.js","App.js","serviceWorker.js","index.js"],"names":["post","endpoint","body","a","fetch","method","headers","JSON","stringify","response","Login","state","input","email","password","errors","loggingIn","loggedIn","handleChange","bind","handleSubmit","event","this","target","name","value","setState","preventDefault","status","json","message","auth","onSubmit","className","type","onChange","placeholder","required","disabled","Component","Register","firstname","lastname","confirmPassword","isRegistered","registering","validate","isValid","RegExp","test","Search","searching","results","keyword","map","id","key","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eb1e172.chunk.js","sourcesContent":["async function post(endpoint, body) {\r\n    const response = await fetch(`https://digi-takehome-assignment.herokuapp.com${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(body)\r\n    });\r\n\r\n    return response;\r\n}\r\n\r\nexport { post };","import React, { Component } from \"react\";\r\nimport { post } from \"../fetch\";\r\n\r\nexport default class Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: {\r\n                email: '',\r\n                password: ''\r\n            },\r\n            errors: {},\r\n            loggingIn: false,\r\n            loggedIn: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const input = this.state.input;\r\n        input[event.target.name] = event.target.value;\r\n\r\n        this.setState({ input });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        this.setState({\r\n            errors: {},\r\n            loggingIn: true\r\n        })\r\n        event.preventDefault();\r\n        const { email, password } = this.state.input;\r\n\r\n        const response = await post('/login', {\r\n            email,\r\n            password\r\n        });\r\n\r\n        if (response.status === 400) {\r\n            const { message } = await response.json();\r\n            const errors = { auth: message };\r\n\r\n            this.setState({\r\n                errors,\r\n                loggingIn: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            loggedIn: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <h3>Login</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email address</label>\r\n                    <input name=\"email\" type=\"email\" className=\"form-control\"\r\n                        value={this.state.input.email}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Enter email\" required/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input name=\"password\" type=\"password\" className=\"form-control\"\r\n                        value={this.state.input.password}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"Enter password\" required/>\r\n                    <div className=\"text-danger\">{this.state.errors.auth}</div>\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={this.state.loggingIn}>\r\n                    {this.state.loggedIn ? 'Logged In!' : 'Log In'}\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { post } from \"../fetch\";\r\n\r\nexport default class Register extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            errors: {},\r\n            input: {\r\n                firstname: '',\r\n                lastname: '',\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: ''\r\n            },\r\n            isRegistered: false,\r\n            registering: false,\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const input = this.state.input;\r\n        input[event.target.name] = event.target.value;\r\n\r\n        this.setState({ input });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            errors: {},\r\n            registering: true\r\n        })\r\n\r\n        if(this.validate()){\r\n            const response = await post('/register', this.state.input);\r\n\r\n            if (response.status === 400) {\r\n                const { message } = await response.json();\r\n                const errors = { email: message };\r\n\r\n                this.setState({\r\n                    errors,\r\n                    registering: false\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                isRegistered: true\r\n            });\r\n        } else {\r\n            this.setState({\r\n                registering: false\r\n            })\r\n        }\r\n    }\r\n \r\n    validate(){\r\n        const input = this.state.input;\r\n        const errors = {};\r\n        let isValid = true;\r\n\r\n        this.setState({\r\n            errors\r\n        })\r\n\r\n        const pattern = new RegExp(/^(?=.*[A-Z])(?=.*[A-Z])(?=.*[^A-Za-z\\d]).{12,}$/);\r\n        if (!pattern.test(input[\"password\"])) {\r\n            isValid = false;\r\n            errors[\"password\"] = \"Please ensure password contains at least 12 characters, at least one upper-case alphabet and at least one non-alphanumeric character.\";\r\n        }\r\n\r\n        if (input[\"password\"] !== input[\"confirmPassword\"]) {\r\n            isValid = false;\r\n            errors[\"confirmPassword\"] = \"Passwords don't match.\";\r\n        }\r\n\r\n        this.setState({\r\n            errors: errors\r\n        });\r\n\r\n        return isValid;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"overflow-auto mh-100 px-3\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h3>Register</h3>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>First name</label>\r\n                        <input type=\"text\" name=\"firstname\" className=\"form-control\"\r\n                            value={this.state.input.firstname}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"First name\" required />\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>Last name</label>\r\n                        <input type=\"text\" name=\"lastname\" className=\"form-control\" \r\n                            value={this.state.input.lastname}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"Last name\" required />\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>Email address</label>\r\n                        <input type=\"email\" name=\"email\" className=\"form-control\" \r\n                            value={this.state.input.email}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"Enter email\" required />\r\n                        <div className=\"text-danger\">{this.state.errors.email}</div>\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>Password</label>\r\n                        <input type=\"password\" name=\"password\" className=\"form-control\" \r\n                            value={this.state.input.password}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"Enter password\" required />\r\n                        <div className=\"text-danger\">{this.state.errors.password}</div>\r\n                    </div>\r\n    \r\n                    <div className=\"form-group\">\r\n                        <label>Confirm Password</label>\r\n                        <input type=\"password\" name=\"confirmPassword\" className=\"form-control\" \r\n                            value={this.state.input.confirmPassword}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"Enter password\" required />\r\n                        <div className=\"text-danger\">{this.state.errors.confirmPassword}</div>\r\n                    </div>\r\n    \r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={this.state.registering}>\r\n                        {this.state.isRegistered ? 'Registered!' : 'Register'}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { post } from \"../fetch\";\r\n\r\nexport default class Search extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: {\r\n                email: '',\r\n                password: ''\r\n            },\r\n            searching: false,\r\n            results: []\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const input = this.state.input;\r\n        input[event.target.name] = event.target.value;\r\n\r\n        this.setState({ input });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            searching: true\r\n        });\r\n\r\n        const { keyword } = this.state.input;\r\n        const response = await post('/search', {\r\n            keyword\r\n        });\r\n\r\n        // console.log(await response.json());\r\n        this.setState({\r\n            results: await response.json(),\r\n            searching: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Search Users</h3>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <input type=\"text\" name=\"keyword\" className=\"form-control\" \r\n                            value={this.state.input.keyword}\r\n                            onChange={this.handleChange}\r\n                            placeholder=\"e.g. John\"/>\r\n                        <div className=\"input-group-append\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled={this.state.searching}>\r\n                                {this.state.searching ? 'Searching...' : 'Search'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n\r\n                <div className=\"overflow-auto my-3 search-results\">\r\n                    <ul className=\"list-group\">\r\n                        {this.state.results.map(({ id, firstname, lastname }) => (\r\n                            <li key={id} className=\"list-group-item\">{firstname} {lastname}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport Login from \"./components/login.component\";\r\nimport Register from \"./components/register.component\";\r\nimport Search from \"./components/search.component\";\r\n\r\nfunction App() {\r\n  return (<Router>\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to={\"/login\"}>Digi Takehome Assignment</Link>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/login\"}>Login</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/register\"}>Register</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to={\"/search\"}>Search</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-inner\">\r\n          <Switch>\r\n            <Route exact path='/' component={Login} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/register\" component={Register} />\r\n            <Route path=\"/search\" component={Search} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div></Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}